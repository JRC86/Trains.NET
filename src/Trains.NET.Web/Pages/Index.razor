@page "/"
@inject Trains.NET.Rendering.IGame _game
@inject Trains.NET.Engine.IGameBoard _gameBoard
@inject Trains.NET.Rendering.IPixelMapper _pixelMapper
@inject IJSRuntime _jsRuntime
@inject GameState _state

@using Trains.NET.Rendering.HtmlCanvas

<canvas class="col-xs-12" id="game" @onmousemove="MouseMove" />

@code
{
    private CanvasWrapper canvas = new CanvasWrapper();
    private System.Threading.Timer? _timer;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var reference = DotNetObjectReference.Create(this);

            await canvas.InitAsync("game", _jsRuntime, reference);

            _game.SetSize(canvas.Width, canvas.Height);

            _game.Render(canvas);

            _timer = new System.Threading.Timer(state =>
            {
                _timer.Change(0, System.Threading.Timeout.Infinite);
                _game.Render(canvas);
                _timer.Change(0, 16);
            }, null, 0, 16);
        }
    }

    [JSInvokable]
    public void Redraw()
    {
        _game.Render(canvas);
    }

    private void MouseMove(MouseEventArgs e)
    {
        if (e.Buttons == 1)
        {
            int x = (int)e.ClientX - canvas.ClientX;
            int y = (int)e.ClientY - canvas.ClientY;

            (int column, int row) = _pixelMapper.PixelsToCoords(x, y);
            if (_state.CurrentTool.IsValid(column, row) == true)
            {
                _state.CurrentTool.Execute(column, row);
            }
        }
    }
}